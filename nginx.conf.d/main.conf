lua_shared_dict moesif_conf 2m;
lua_package_path "/usr/local/openresty/luajit/share/lua/5.1/cjson?.lua;/usr/local/openresty/luajit/share/lua/5.1/lua/resty/moesif/?.lua;/usr/local/openresty/luajit/share/lua/5.1/resty/?.lua;;";

init_by_lua_block {
   local config = ngx.shared.moesif_conf;
   config:set("application_id", os.getenv("MOESIF_APPLICATION_ID"))
   config:set("debug", true)
   jwt_secret = os.getenv("JWT_SECRET")

   local mo_client = require "moesifapi.lua.moesif_client"
   mo_client.get_moesif_client(ngx)
  }
   
server {
  listen 80;
  resolver 8.8.8.8;

  # Customer identity variables that Moesif will read downstream
  set $moesif_user_id nil;
  set $moesif_company_id nil;
  
  # Request/Response body variable that Moesif will use downstream
  set $moesif_res_body nil;
  set $moesif_req_body nil;

  # Optionally, identify the user and the company (account)
  # from a request or response header, query param, NGINX var, etc
  header_filter_by_lua_block  { 
    ngx.var.moesif_user_id = ngx.req.get_headers()["User-Id"]
    ngx.var.moesif_company_id = ngx.req.get_headers()["Company-Id"]
  }
    
  access_by_lua_file /usr/local/openresty/luajit/share/lua/5.1/resty/moesif/read_req_body.lua;
  body_filter_by_lua_file /usr/local/openresty/luajit/share/lua/5.1/resty/moesif/read_res_body.lua;
  log_by_lua_file /usr/local/openresty/luajit/share/lua/5.1/lua/resty/moesif/send_event.lua;
  
  # Sample API Proxied to internal API
  location /api {
    access_by_lua_file /usr/local/openresty/nginx/conf/conf.d/jwt_verification.lua;
    proxy_pass http://127.0.0.1:80/internal;
  }

  # If you intend to skip logging api call for specific location context, you could use - `set $moesif_log_event false;`.
  # For more reference refer to - https://github.com/Moesif/lua-resty-moesif#moesif_log_event
  location /internal {
     add_header Content-Type "application/json";
     return 200 '{\r\n  \"message\": \"Hello World\",\r\n  \"completed\": true\r\n}';
  }
}
